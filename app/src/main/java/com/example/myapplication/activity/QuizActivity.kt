package com.example.myapplication.activity

import android.content.Context
import android.content.Intent
import android.graphics.*
import android.graphics.drawable.BitmapDrawable
import android.net.Uri
import android.os.Bundle
import android.provider.MediaStore
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.WindowManager
import android.widget.Button
import android.widget.TextView
import androidx.activity.result.ActivityResultLauncher
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.net.toFile
import com.example.myapplication.R
import com.example.myapplication.activity.BaseActivity.Companion.INTENT_CODE_FROM_QUIZ_TO_BASE
import com.example.myapplication.databinding.ActivityQuizBinding
import com.example.myapplication.dto.AilabApiResponse
import com.example.myapplication.dto.QuizSetItem
import com.example.myapplication.retrofit.RetrofitApi
import com.example.myapplication.util.ContentUriRequestBody
import com.example.myapplication.util.ProgressDialogUtil
import com.example.myapplication.util.SharedPreferencesUtil
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import kotlinx.coroutines.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import okhttp3.internal.wait
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.io.*
import java.net.HttpURLConnection
import java.net.URL
import java.text.SimpleDateFormat
import java.util.*


//TODO(5/10) : 인텐트 화면전환 구현
// 뒤로가기 버튼 처리
// 맞거나 틀렸을 때 해설(xml) 띄워주기 + 다음 액티비티로 넘어가기
class QuizActivity : AppCompatActivity() {
    companion object{
        /** 상수선언 : 퀴즈 정답이 틀렸는지 맞았는지*/
        const val CIRCLE_EFFECT = 0
        const val CROSS_EFFECT = 1




        /** change face options */
        const val BIG_LAUGH = 0 //default
        const val POUTING = 1
        const val FEEL_SAD = 2
        const val SMILE = 3
        const val OPENING_EYES = 4


        /**문제 출제용 (Luxid아님)
         *  웃음 :    List NICE = {PROUD 뿌듯함, THANKFUL 고마움, NICE기분좋음}
         *  활짝웃음 : List SMILE = {BIG_LAUGH 활짝웃음, HAPPINESS 행복함, DELIGHT 반가움}
         *  삐짐 :    List POUT = {POUTING 삐짐}
         *  우울함:   List BAD = {DEPRESSED 우울함 , DISTRESSED 속상함}
         * */
        const val PROUD = 3
        const val THANKFUL = 3
        const val NICE = 3
        //BIG_LAUGH = 21 (위에 이미 정의됌)
        const val HAPPINESS = 0
        const val DELIGHT = 0
        //POUTING = 31 (위에 이미 정의됌)
        const val DEPRESSED = 2
        const val DISTRESSED = 2

        final val MAP_EMOTION = mapOf<String,Int>("활짝 웃음" to 0, "행복함" to 0, "반가움" to 0,
            "삐짐" to 1,
            "우울함" to 2, "속상함" to 2,
            "뿌듯함" to 0, "고마움" to 0, "기분 좋음" to 0)


        /**Luxand api result*/

        //------------QOA : Question Option Array--------------//
//        val QOA_NICE = listOf<Int>(PROUD, THANKFUL, NICE)
//        val QOA_SMILE = listOf<Int>(BIG_LAUGH, HAPPINESS, DELIGHT)
//        val QOA_POUT = listOf<Int>(POUTING)
//        val QOA_BAD = listOf<Int>(DEPRESSED, DISTRESSED)
//
//        val map_NICE = mapOf<Int, String> (PROUD to "", THANKFUL to "", NICE to "")
//        val map_SMILE = mapOf<Int, String> (BIG_LAUGH to "", THANKFUL to "", NICE to "")
//        val map_POUT = mapOf<Int, String> (PROUD to "", THANKFUL to "", NICE to "")
//        val map_BAD = mapOf<Int, String> (PROUD to "", THANKFUL to "", NICE to "")


        




        const val QUIZSET_FILE_PATH = "app/src/main/assets/"

        const val api1SampleResult = "https://ai-result-rapidapi.ailabtools.com/cutout/segmentBody/2023-05-24/134739-242adab8-eadc-a923-6085-28b6dbf058a0-1684936059.jpg"
        const val api2SampleResult = ""

    }


    private val TAG: String? = "QUIZ_ACTIVITY LOGGING.... .... ..."

    private lateinit var dialogLayout: View //custom dialog
    private lateinit var viewBinding: ActivityQuizBinding
    private lateinit var activityResultLauncher: ActivityResultLauncher<Intent> //

    private lateinit var dialog: AlertDialog //dialog

    private var imgUri : Uri ?= null
    private var quizIndex : Int = 0
    private var quizItem : QuizSetItem ?= null

    // Declaring a Bitmap local
    var mImage: Bitmap? = null

    private lateinit var imgBackX : String // url

    private var imgFaceChanged : String ?= null //base64 encoded


    private lateinit var btn1 :  Button
    private lateinit var btn2 :  Button
    private lateinit var btn3 :  Button
    private lateinit var btn4 :  Button
    private lateinit var btnGroup : List<Button>



    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        viewBinding = ActivityQuizBinding.inflate(layoutInflater)
        setContentView(viewBinding.root)


        /* // 쓰지 않아도 될듯
        activityResultLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            if(result.resultCode == Activity.RESULT_OK || result.resultCode == INTENT_CODE_FROM_CAPTURE_TO_QUIZ){ // capture->quiz로 넘어온 인텐트

            }
            else Log.d("TAG", "imgUri is null")
        }
        */

         imgUri = Uri.parse(SharedPreferencesUtil.getString(getString(R.string.orig_pic)))

        //TODO 왜 intent를 받아오지 못하는지 확인
//        val uri = intent.getStringExtra("imgUri")
//        imgUri = Uri.parse(uri)

        viewBinding.quizBtnBack.setOnClickListener(){ finish() }
        viewBinding.quizBtnGallery.setOnClickListener(){/*TODO:*/ }
        quizInit()
        setQuizUI()
    }




    private fun quizInit(){
        val quizSetList : List<QuizSetItem> = parseJsonFile(applicationContext, "quiz_data.json")
        val quizSetCnt = quizSetList.size
        quizIndex =  (0..quizSetCnt-1).shuffled().first()
        Log.d(TAG, "quizIndex : $quizIndex, quizSetCnt : $quizSetCnt")

        quizItem = quizSetList[quizIndex]
    }

    private fun parseJsonFile(context: Context, fileName: String): List<QuizSetItem> {
        val jsonString = readJsonFileFromAssets(context, fileName)
        return if (jsonString != null) {
            val gson = Gson()
            val type = object : TypeToken<List<QuizSetItem>>() {}.type
            gson.fromJson(jsonString, type)
        } else {
            emptyList()
        }
    }


    fun readJsonFileFromAssets(context: Context, fileName: String): String? {
        return try {
            val inputStream = context.assets.open(fileName)
            val size = inputStream.available()
            val buffer = ByteArray(size)
            inputStream.read(buffer)
            inputStream.close()
            String(buffer, Charsets.UTF_8)
        } catch (e: IOException) {
            e.printStackTrace()
            null
        }
    }


    fun setQuizUI() {

        viewBinding.quizQuestionStatement.text = quizItem!!.problem //1) 문제
        viewBinding.quizQuestionSection.text = quizItem!!.context //2)상황 설명

        btn1 = viewBinding.quizAnswerBtn1
        btn2 =viewBinding.quizAnswerBtn2
        btn3 =viewBinding.quizAnswerBtn3
        btn4 =viewBinding.quizAnswerBtn4
        btnGroup = listOf(btn1,btn2,btn3,btn4)

        btnGroup.forEachIndexed { index, button ->
            button.text = quizItem!!.options[index]
        }

        val ans = quizItem!!.answer //정답 : String

        val onClickListener = View.OnClickListener {
            if ((it as TextView).text == ans) {
                /** 정답을 맞춘 경우
                 *  1) motion effect (동그라미 효과)
                 *  2) dialog 띄워주기
                 * */
                drawMotionEffect(it, CIRCLE_EFFECT) //1
                inflateDialog(true) //2
            } else {
                /** 틀린 걸 골랐을 경우
                 *  1) motion effect (틀렸다는 효과)
                 *  2) dialog 띄워주기
                 * */
                drawMotionEffect(it, CROSS_EFFECT) //1
                inflateDialog(false) //2
            }
        }

        btnGroup.forEach { it.setOnClickListener(onClickListener) }
    }









    private fun inflateDialog(b: Boolean) {
        //1 다이어로그를 루트뷰에 추가
        dialogLayout = LayoutInflater.from(this)
            .inflate(R.layout.dialog_quiz_answer, null)

        //2 각 뷰들의 text를 설정해주고, setOnclickListener 설정
        initDialogComponents(dialogLayout, b)

        // Build the dialog
        val builder = AlertDialog.Builder(this)
            .setView(dialogLayout)

        // Show the dialog
        dialog = builder.show()
        // 다이얼로그를 닫았을 때 호출되는 콜백 정의
        dialog.setOnDismissListener {
            // 액티비티를 다시 생성하지 않도록 설정
            dialog.dismiss()
        }

        // Set the dialog size
        val window = dialog.window
        window?.setLayout(
            WindowManager.LayoutParams.MATCH_PARENT,
            WindowManager.LayoutParams.WRAP_CONTENT
        )
    }


    // TODO : 3 문제가 틀리고 맞았을 경우에 따라서
    //  각 뷰들의 text를 설정해주고, setOnclickListener 설정
    private fun initDialogComponents(dialogLayout: View?, b: Boolean) {
        val resultStatusTV : TextView = dialogLayout!!.findViewById<Button>(R.id.dialog_quiz_result_status)
        val resultExplTV : TextView = dialogLayout!!.findViewById<Button>(R.id.dialog_quiz_result_expl)
        val nextBtn : Button = dialogLayout!!.findViewById<Button>(R.id.dialog_quiz_result_btn_next)

        // answer


        //code refactoring 필요
        if(b){ //정답일 경우
            //1 텍스트 설정
            resultStatusTV.text = "정답! 훌륭합니다!"
            resultExplTV.text = quizItem!!.explanation
            nextBtn.text = "표정연습 하러가기"


            //2 setOnclickListener 설정
            nextBtn.setOnClickListener{
                dialog.dismiss()

                ProgressDialogUtil.showProgressDialog(this@QuizActivity, "API 통신 중 ...")

                CoroutineScope(Dispatchers.IO).launch{
                    try{
                        /** 실전
                        다음 let문을 썼더니 API call을 기다리지 않는 거 같음.
                        ?.let{ api2SampleResult}.toString()
                         */
                        val opt : Int? = MAP_EMOTION.get(quizItem?.answer)
                        if(opt!=null) SharedPreferencesUtil.putString(getString(R.string.quiz_ans_str), opt.toString())

                        val backX : String = callBackgroundRemove()   //?.let{ api1SampleResult}.toString() //인물 배경제거 API1, 호출 실패시 샘플
                        val file : File = convertToFile(applicationContext, backX) //
                        val chnged  = callChageFacialExpr(file, opt/**/)


                        //테스트
//                        val backX = api1SampleResult
//                        val file : File = convertToFile(applicationContext, backX)
//                        val chnged = api2SampleResult


                        withContext(Dispatchers.Main){
                            SharedPreferencesUtil.putString(getString(R.string.trns_pic), chnged)

                            val intent : Intent = Intent(this@QuizActivity, BaseActivity::class.java)
                            intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT) // 기존에 존재하던 액티비티라면 해당 액티비티로 돌아옴
                            if(chnged != null) intent.putExtra(getString(R.string.trns_pic), chnged /*이미지처리 완료된 Base64-decoded-image*/)
                            else throw java.lang.NullPointerException("${TAG} API2 BAD response")
                            ProgressDialogUtil.hideProgressDialog()
                            Log.d(TAG, "API2-성공!!! "+ chnged!!)
                            startActivity(intent)
                        }
                    }catch (e:java.lang.Exception){
                        e.printStackTrace()
                    }
                }

            }




        }else{ // 틀렸을 경우 TODO 새롭게 다른 문제로 버튼 텍스트들을 초기화
            //1 텍스트 설정
            resultStatusTV.text = "오답! 틀렸습니다!"
            resultExplTV.visibility = View.GONE //getString(R.string.Lorem_Ipsum)
            nextBtn.text = "퀴즈 재도전하기"
            //2 setOnclickListener 설정
            nextBtn.setOnClickListener{
                dialog.dismiss()
                // Remove overlay layout from content view
                val rootView = window.decorView.findViewById<ViewGroup>(android.R.id.content)
                rootView.removeView(dialogLayout)
            }
        }
    }





    private suspend fun convertToFile(context: Context, url: String): File {

            var connection: HttpURLConnection? = null
            var inputStream: InputStream? = null
            var outputStream: FileOutputStream? = null
            var file: File? = null
            val fileName = generateUniqueFileName() // Generate a unique file name
            try {
                val urlConnection = URL(url)
                connection = urlConnection.openConnection() as HttpURLConnection
                connection.connect()

                inputStream = connection.inputStream
                // this will be useful so that you can show a tipical 0-100%
                // progress bar
                // this will be useful so that you can show a tipical 0-100%
                // progress bar
                val lenghtOfFile = connection.contentLength


                outputStream = FileOutputStream(context.filesDir.toString() + "/$fileName")

                val data = ByteArray(1024)

                var total: Long = 0
                var count = 0
                while (inputStream.read(data).also { count = it } != -1) {
                    total += count
                    // writing data to file
                    outputStream.write(data, 0, count)
                }

            } catch (e: Exception) {
                println(e.message)
            } finally {
                inputStream?.close()
                outputStream?.close()
                connection?.disconnect()
            }
            return File(context.filesDir.toString() + "/$fileName")
    }





    private fun generateUniqueFileName(): String {
        val timeStamp = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(Date())
        return "image_$timeStamp.jpg"
    }






    private fun getFilePathFromContentUri(context: Context, contentUri: Uri?): String? {
        if (contentUri == null) return null
        val projection = arrayOf(MediaStore.MediaColumns.DATA)
        val cursor = context.contentResolver.query(contentUri, projection, null, null, null)
        val filePath: String? = if (cursor != null && cursor.moveToFirst()) {
            val columnIndex = cursor.getColumnIndexOrThrow(MediaStore.MediaColumns.DATA)
            cursor.getString(columnIndex)
        } else {
            null
        }
        cursor?.close()
        return filePath
    }




/**콜백을 없애야 suspend 기능이 작동함.
 * IO스레드에서 이 suspend함수를 기다리는데 IO스레드 내부에서 또 다른 callBack을 기다리고 있으면 ....????
 * 다시 물어봐야겠다
 * */
    private suspend fun callChageFacialExpr(file:File, opt: Int ?= 0) : String =
        withContext(Dispatchers.IO){
        var ret : String ?= null //imgFaceChanged
        val requestFile = ContentUriRequestBody(this@QuizActivity, Uri.fromFile(file)).toFormData("image_target")
        RetrofitApi.getAilabtoolsService.getChangedImg(requestFile, opt).data?.image!!
    }





    suspend fun callBackgroundRemove(): String  =
        withContext(Dispatchers.IO){
        val requestFile = ContentUriRequestBody(applicationContext, imgUri!!).toFormData(/**/"image")//
        val option = "whiteBK"
        val requestOption = option.toRequestBody("multipart/form-data".toMediaType())
        RetrofitApi.getAilabtoolsService.getBackRmvdImg(requestFile, requestOption).data?.image_url!! //invokeSuspend error
    }

    //TODO: 에러 고쳐야돼... 왜 되던게 안될까?
//    fun callBackgroundRemove(): String {
//        val requestFile = ContentUriRequestBody(applicationContext, imgUri).toFormData()
//
//        val option ="whiteBK"
//        val requestOption = option.toRequestBody("multipart/form-data".toMediaType())
//
//
//        val call = RetrofitApi.getAilabtoolsService.getBackRmvdImg(requestFile, requestOption)
//        call.enqueue(object: Callback<AilabApiResponse> {
//            override fun onResponse(call: retrofit2.Call<AilabApiResponse>, response: Response<AilabApiResponse>){
//                Log.d("TAG", "callBackgroundRemove (네트워크 통신까진 됐음)")
//                if(response.isSuccessful)
//                {
//                    Log.d("TAG", "callBackgroundRemove 완전 성공 (Ailabtools)" + response.body()!!.data!!.image_url.toString())
//                }else{
//                    Log.d("TAG", "callBackgroundRemove 실패 (Ailabtools, 코드 로직 오류)" + response.body()!!.toString())
//                }
//            }
//
//            override fun onFailure(call: retrofit2.Call<AilabApiResponse>, t: Throwable)
//            {
//                Log.e("TAG", t.message.toString()) // API 요청 실패 시의 처리
//                Log.d("TAG", "api 호출 실패 (네트워크 통신 실패)")
//            }
//        })
//    }


    //완성!
    //INFO : top, right, left, bottom 등은 View 부모의 x,y를 기준으로 좌표를 주지, 스크린의 절대적인 좌표가 아닌듯
    private fun drawMotionEffect(it: View?, shape: Int) {
        val bitmap = Bitmap.createBitmap(it?.width!!, it?.height!!, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(bitmap)
        val paint = Paint().apply {
            color = Color.RED // 동그라미 색상
            style = Paint.Style.STROKE // 동그라미 윤곽선 스타일
            strokeWidth = 10f // 동그라미 윤곽선 두께
        }

        when (shape) {
            CIRCLE_EFFECT -> {
                canvas.drawCircle(it?.width!! / 2f, it?.height!! / 2f, it?.width!!/6f, paint) // 동그라미 그리기
                it?.foreground = BitmapDrawable(resources, bitmap)
            }
            CROSS_EFFECT -> {
                canvas.drawLine(it!!.width.toFloat()/5, it!!.height.toFloat()/5, it!!.width.toFloat()*4/5, it!!.height.toFloat()*4/5, paint)
                it!!.foreground = BitmapDrawable(resources, bitmap)
            }
        }
    }




    // Intent로 다음 액티비티로 넘어가기 전에, 저장해둬야할 것들을 저장하는 구간
    override fun onPause() {
        super.onPause()
        //TODO 기존 버튼에 텍스트 대입, 틀렸던 모먼트 등 유지
    }





    // 다시 이 액티비티로 화면이 돌아왔을때 저장해뒀던 텍스트를 놔야함
    override fun onResume() {
        super.onResume()
        //TODO onPause()에서 저장해뒀던 것들을 다시 불러와서 입력
    }





    override fun onDestroy() {
        super.onDestroy()
        //TODO onPause()에서 저장해뒀던 것들을 삭제
    }




}
